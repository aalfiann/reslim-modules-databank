<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\databank\DataBank as DataBank;                    //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;         //ValidateParam                 >> To validate the body form request  
use \classes\middleware\ValidateParamURL as ValidateParamURL;   //ValidateParamURL              >> To validate the query parameter url
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim
use \classes\SimpleCache as SimpleCache;                        //SimpleCache class             >> To cache response ouput server side


    // Get module information
    $app->map(['GET','OPTIONS'],'/databank/get/info/', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag2hour.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        $body->write($b->viewInfo());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ApiKey);

    // Installation 
    $app->get('/databank/install/{username}/{token}', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $b->username = $request->getAttribute('username');
        $b->token = $request->getAttribute('token');
        $body = $response->getBody();
        $body->write($b->install());
        return classes\Cors::modify($response,$body,200);
    });

    // Uninstall (This will clear all data) 
    $app->get('/databank/uninstall/{username}/{token}', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $b->username = $request->getAttribute('username');
        $b->token = $request->getAttribute('token');
        $body = $response->getBody();
        $body->write($b->uninstall());
        return classes\Cors::modify($response,$body,200);
    });


    //CRUD======================================================


    // POST api to create new data
    $app->post('/databank/create', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $datapost = $request->getParsedBody();
        $b->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $b->username = $datapost['Username'];
        $b->token = $datapost['Token'];
        $b->bank_name = $datapost['Bank_name'];
        $b->bank_fullname = $datapost['Bank_fullname'];
        $b->bank_address = $datapost['Bank_address'];
        $b->account_name = $datapost['Account_name'];
        $b->account_no = $datapost['Account_no'];
        $b->custom_id = (!empty($datapost['Custom_id'])?$datapost['Custom_id']:'');
        $b->custom_field = (!empty($datapost['Custom_field'])?$datapost['Custom_field']:'');
        $body = $response->getBody();
        $body->write($b->create());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam(['Custom_id','Bank_address'],'0-250'))
        ->add(new ValidateParam('Custom_field','0-10000','json'))
        ->add(new ValidateParam('Bank_fullname','0-50'))
        ->add(new ValidateParam('Account_no','0-20','required'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam(['Username','Bank_name','Account_name'],'1-50','required'));


    // POST api to update data
    $app->post('/databank/update', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $datapost = $request->getParsedBody();
        $b->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $b->username = $datapost['Username'];
        $b->token = $datapost['Token'];
        $b->bank_name = $datapost['Bank_name'];
        $b->bank_fullname = $datapost['Bank_fullname'];
        $b->bank_address = $datapost['Bank_address'];
        $b->account_name = $datapost['Account_name'];
        $b->account_no = $datapost['Account_no'];
        $b->custom_id = (!empty($datapost['Custom_id'])?$datapost['Custom_id']:'');
        $b->custom_field = (!empty($datapost['Custom_field'])?$datapost['Custom_field']:'');
        $b->id = $datapost['ID'];
        $body = $response->getBody();
        $body->write($b->update());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam(['Custom_id','Bank_address'],'0-250'))
        ->add(new ValidateParam('Custom_field','0-10000','json'))
        ->add(new ValidateParam('Bank_fullname','0-50'))
        ->add(new ValidateParam('ID','1-11','numeric'))
        ->add(new ValidateParam('Account_no','0-20','required'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam(['Username','Bank_name','Account_name'],'1-50','required'));


    // POST api to delete data
    $app->post('/databank/delete', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $datapost = $request->getParsedBody();
        $b->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $b->id = $datapost['ID'];
        $b->username = $datapost['Username'];
        $b->token = $datapost['Token'];
        $body = $response->getBody();
        $body->write($b->delete());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('ID','1-11','numeric'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));


    // GET api to show all data (index) with pagination
    $app->get('/databank/index/{username}/{token}/{page}/{itemsperpage}/', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $b->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $b->search = filter_var((empty($_GET['query'])?'':$_GET['query']),FILTER_SANITIZE_STRING);
        $b->username = $request->getAttribute('username');
        $b->token = $request->getAttribute('token');
        $b->page = $request->getAttribute('page');
        $b->itemsPerPage = $request->getAttribute('itemsperpage');
        $body = $response->getBody();
        $body->write($b->index());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParamURL('query'));


    // GET api to show all data (index) with pagination
    $app->get('/databank/index/keywords/{username}/{token}/{page}/{itemsperpage}/', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $b->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $b->search = filter_var((empty($_GET['query'])?'':$_GET['query']),FILTER_SANITIZE_STRING);
        $b->firstdate = filter_var((empty($_GET['firstdate'])?'':$_GET['firstdate']),FILTER_SANITIZE_STRING);
        $b->lastdate = filter_var((empty($_GET['lastdate'])?'':$_GET['lastdate']),FILTER_SANITIZE_STRING);
        $b->custom_id = (empty($_GET['keywords'])?'':$_GET['keywords']);
        $b->username = $request->getAttribute('username');
        $b->token = $request->getAttribute('token');
        $b->page = $request->getAttribute('page');
        $b->itemsPerPage = $request->getAttribute('itemsperpage');
        $body = $response->getBody();
        $body->write($b->indexKey());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParamURL('query'))->add(new ValidateParamURL('keywords','0-250'));


    // GET api to read single data
    $app->get('/databank/read/{id}/{username}/{token}', function (Request $request, Response $response) {
        $b = new DataBank($this->db);
        $b->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $b->username = $request->getAttribute('username');
        $b->token = $request->getAttribute('token');
        $b->id = $request->getAttribute('id');
        $body = $response->getBody();
        $body->write($b->read());
        return classes\Cors::modify($response,$body,200);
    });

    // GET api to read single data for public user (include cache)
    $app->map(['GET','OPTIONS'],'/databank/read/{id}/', function (Request $request, Response $response) {
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(300,["apikey","lang"])){
            $datajson = SimpleCache::load(["apikey","lang"]);
        } else {
            $b = new DataBank($this->db);
            $b->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
            $b->id = $request->getAttribute('id');
            $datajson = SimpleCache::save($b->readPublic(),["apikey","lang"],null,300);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))->add(new ApiKey);